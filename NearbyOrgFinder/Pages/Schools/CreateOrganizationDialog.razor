@using Radzen
@using Radzen.Blazor
@using NearbyOrgFinder.Data
@using NearbyOrgFinder.Services
@using Database
@using Database.Entities
@using System.Collections

<style>
    .form-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
    }
    
    .form-row {
        display: flex;
        flex-direction: row;
        align-items: start;
        justify-content: space-between;
        margin-bottom: 1rem;
        gap: 1rem;
    }
    .button-container {
        position: absolute;
            bottom: 0;
            width: 100%;
            padding: 10px;
            display: flex;
            justify-content: flex-end;
            align-items: center;
    }
</style>

<RadzenTemplateForm TItem="CreateOrganizationModel" Data="@model" Submit="@OnSubmit" class="form-container">
    <div class="form-row">
        <RadzenLabel Text="@nameof(model.Name)" Style="font-weight: bold"/>
        <RadzenTextBox @bind-Value="@model.Name" />
    </div>
    <div class="form-row">
        <RadzenLabel Text="@nameof(model.Description)" Style="font-weight: bold"/>
        <RadzenTextArea @bind-Value="@model.Description" />
    </div>
    <div class="form-row">
        <RadzenLabel Text="@nameof(model.Address)" Style="font-weight: bold"/>
        <RadzenTextBox @bind-Value="@model.Address"/>
    </div>
    <div class="form-row">
        <RadzenLabel Text="@nameof(model.AddressComment)" Style="font-weight: bold"/>
        <RadzenTextArea @bind-Value="@model.AddressComment"/>
    </div>
    <div class="form-row">
        <RadzenLabel Text="@nameof(model.Longtitude)" Style="font-weight: bold"/>
        <RadzenNumeric @bind-Value="@model.Longtitude"/>
        <RadzenLabel Text="@nameof(model.Latitude)" Style="font-weight: bold"/>
        <RadzenNumeric @bind-Value="@model.Latitude"/>
    </div>
    <div class="form-row">
        <RadzenLabel Text="City" Style="font-weight: bold"/>
        <RadzenDropDown TValue="long" @ref="_citiesDd" bind-Value="@model.CityId" TextProperty="@nameof(CityEntity.Name)" ValueProperty="@nameof(CityEntity.Id)"Data=@_cities Style="width: 100%; max-width: 400px;"/>
    </div>
    <div class="form-row">
        <RadzenLabel Text="OrganizationType" Style="font-weight: bold"/>
        <RadzenDropDown TValue="OrganizationTypes" Value="@model.Type"
                        Data="@(Enum.GetValues(typeof(OrganizationTypes)).Cast<Enum>())" Style="width: 100%; max-width: 400px;"/>
    </div>
    <div class="modal-footer button-container">
        <RadzenButton Text="Close" ButtonStyle="ButtonStyle.Secondary" Click="@OnCancel"/>
        <RadzenButton Text="Save Changes" ButtonType="ButtonType.Submit"/>
    </div>
</RadzenTemplateForm>


@code {
    private static DialogService _dialogService;
    private CityEntity _selectedCity;
    private RadzenDropDown<long> _citiesDd;
    private IEnumerable<CityEntity> _cities { get; set; }
    [Inject] IOrganizationsService OrganizationsService { get; set; }
    [Inject] DbContext DbContext { get; set; }
    public CreateOrganizationModel model { get; } = new();

    protected async override Task OnInitializedAsync()
    {
        _cities = DbContext.Cities.ToList();
    }

    private async Task OnSubmit()
    {
        // binding does not works for some reason - therefore using workaround
        model.CityId = (long)_citiesDd?.GetValue();
        await OrganizationsService.CreateOrganizationAsync(model);
        _dialogService.Close(model);
    }

    private void OnCancel()
    {
        _dialogService.Close();
    }

    public static async Task<object> OpenAsync(DialogService dialogService)
    {
        _dialogService = dialogService;
        return await _dialogService.OpenAsync<CreateOrganizationDialog>($"Create Organization",
            new Dictionary<string, object>() { },
            new DialogOptions() { Width = "512px", Height = "640px" });
    }

}