@page "/map"

@using OpenLayers.Blazor
@using NearbyOrgFinder.Services
@using Radzen
@using Radzen.Blazor
@using MarkerType = OpenLayers.Blazor.MarkerType
@using NearbyOrgFinder.Data
@using Coordinate = OpenLayers.Blazor.Coordinate
@using Point = NetTopologySuite.Geometries.Point
@using Database.Entities
@using Database

<style>
    .marker {
        background-color: #ff9800;
        color: white;
        padding: 10px;
        border-radius: 5px;
        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.3);
    }
  
    .marker-title {
        font-size: 20px;
        margin-bottom: 5px;
    }

    .marker-coordinates {
        font-size: 14px;
    }
</style>

<RadzenDialog/>
<RadzenNotification/>
<RadzenTooltip/>

<PageTitle>Map</PageTitle>

<h2>Map of @_name</h2>

<div style="margin-bottom: 10px">
    <RadzenDropDown @bind-Value=@_selectedTypes Data="@_organizationTypes" Multiple=true Placeholder="Выберите типы организаций"/>
    <RadzenButton Text="Ближайшие организации" Click="@(() => CalcNearestOrganizations())" ButtonStyle="ButtonStyle.Light" Disabled="@(_selectedPoint is null)"/>
    <RadzenButton Text="Показать организации" ButtonStyle="ButtonStyle.Primary" Click="@(() => OnShowOrganizations())"/>
    <RadzenButton Text="Сборс" ButtonStyle="ButtonStyle.Danger" Click="ResetAsync"/>
</div>

<OpenStreetMap @ref="_map" Style="height:600px;" Class="card mb-2" @bind-Center="_center" OnClick="@OnMapClick" AutoPopup>
    <Popup>
        <div id="popup" class="ol-box">
            @if (context is Marker marker)
            {
                <div class="marker">
                    <h3 class="marker-title">@marker.Title</h3>
                    <p class="marker-coordinates">@marker.Coordinate.X / @marker.Coordinate.Y</p>
                </div>
            }
        </div>
    </Popup>
</OpenStreetMap>

<div style="display: flex; flex-direction: row; align-items: flex-start">
    @foreach (var type in _nearestOrganization.Keys)
    {
        <RadzenCard Style="width: 400px" Class="mb-4" Visible="@(_nearestOrganization[type].Item1 is not null)">
        <h4 style="text-transform: uppercase; font-weight: bold; color: #3366ff;">
            @_nearestOrganization[type].Item1.Name
        </h4>
        <div>
            <p style="font-weight: bold; color: #100;">
                Description:
            </p>
            <p>
                @_nearestOrganization[type].Item1.Description
            </p>
            <p style="font-weight: bold; color: #100;">
                Address:
            </p>
            <p>
                @_nearestOrganization[type].Item1.Address
            </p>
            <p style="font-weight: bold; color: #100;">
                Address Comment:
            </p>
            <p>
                @_nearestOrganization[type].Item1.AddressComment
            </p>
            <p style="font-weight: bold; color: #100;">
                Rating:
            </p>
            <p>
                @(_nearestOrganization[type].Item1.Rating != null ? _nearestOrganization[type].Item1.Rating.ToString() : "")
            </p>
            <p style="font-weight: bold; color: #100;">
                Location:
            </p>
            <p>
                @(_nearestOrganization[type].Item1.Location != null ? _nearestOrganization[type].Item1.Location.ToString() : "")
            </p>
            <p style="font-weight: bold; color: #100;">
                Mail Index:
            </p>
            <p>
                @_nearestOrganization[type].Item1.MailIndex
            </p>
            <p style="font-weight: bold; color: #100;">
                District:
            </p>
            <p>
                @_nearestOrganization[type].Item1.District
            </p>
            <p style="font-weight: bold; color: #100;">
                Working Hours:
            </p>
            <p>
                @_nearestOrganization[type].Item1.WorkingHours
            </p>
        </div>
    </RadzenCard>
    }
</div>
@code{
    [Inject] NotificationService Notifications { get; set; }
    [Inject] ICityService CityService { get; set; }
    [Inject] IOrganizationsService OrganizationsService { get; set; }
    
    private Coordinate _center = new(0, 0);
    private OpenStreetMap _map;
    private string? _name;
    private CityInfo _selectedCity;
    private Marker? _selectedPoint;

    private List<OrganizationTypes> _organizationTypes = Enum.GetValues(typeof(OrganizationTypes)).Cast<OrganizationTypes>().ToList();
    private Dictionary<OrganizationTypes, List<Marker>> _markers = new();
    private Dictionary<OrganizationTypes, bool> _showOrganizations = new();
    private Dictionary<OrganizationTypes, (OrganizationEntity?, Marker?)> _nearestOrganization = new ();
    private List<OrganizationTypes> _selectedTypes = new ();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) return;
        try
        {
            _selectedCity = await CityService.GetCityByIdAsync("00000000-0000-0000-0000-000000000001");

            foreach (var type in Enum.GetValues(typeof(OrganizationTypes)).OfType<OrganizationTypes>().ToArray())
            {
                _markers[type] = new List<Marker>();
                _showOrganizations[type] = false;
                _nearestOrganization[type] = (null,null);
            }
            
            _name = _selectedCity.Name;
            _center = new Coordinate(_selectedCity.Center.X, _selectedCity.Center.Y);
            StateHasChanged();
        }
        catch (Exception e)
        {
            Notifications.Notify(NotificationSeverity.Error, "Could not get SPB");
            Console.WriteLine(e);
        }
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task CalcNearestOrganizations()
    {
        foreach (var selectedType in _selectedTypes)
        {
            await CalcNearestOrganization(selectedType);
        }
    }

    private async Task OnShowOrganizations()
    {
        foreach (var selectedType in _selectedTypes)
        {
            await OnShowOrgValueChanged(selectedType);
        }
    }

    private async Task OnShowOrgValueChanged(OrganizationTypes type)
    {
        _showOrganizations[type] = !_showOrganizations[type];
        await ToggleOrgMarkersAsync(type);
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task ToggleOrgMarkersAsync(OrganizationTypes type)
    {
        IEnumerable<OrganizationEntity> orgs;
        var iconImage = "";
        switch (type)
        {
            case OrganizationTypes.School:
                orgs = await OrganizationsService.GetOrganizationListByCityId(_selectedCity.ExternalId, OrganizationTypes.School);
                iconImage = "images/high-school-icon-png.png";
                break;
            case OrganizationTypes.Pharmacy:
                orgs = await OrganizationsService.GetOrganizationListByCityId(_selectedCity.ExternalId, OrganizationTypes.Pharmacy);
                iconImage = "images/pharmacy-icon.png";
                break;
            case OrganizationTypes.Vet:
                orgs = await OrganizationsService.GetOrganizationListByCityId(_selectedCity.ExternalId, OrganizationTypes.Vet);
                iconImage = "images/vet-icon.png";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(type), type, null);
        }
        if (_showOrganizations[type])
        {
            var markers = orgs.Select(s => new Marker(
                new Coordinate(s.Location.X, s.Location.Y),
                iconImage, 414, 602, 414, 602)
            { Scale = 0.1, Popup = true, Title = s.Name });
            foreach (var marker in markers)
            {
                _map.MarkersList.Add(marker);
                _markers[type].Add(marker);
            }
        }
        else
        {
            foreach (var marker in _markers[type])
            {
                _map.MarkersList.Remove(marker);
            }

            _markers[type] = new List<Marker>();
        }
    }
    
    private async Task CalcNearestOrganization(OrganizationTypes type)
    {
        var nearest = await OrganizationsService.GetNearestOrganization(new Point(_selectedPoint.Point.X, _selectedPoint.Point.Y), type);
        var iconImage = type switch
        {
            OrganizationTypes.School => "images/special-high-school-icon-png.png",
            OrganizationTypes.Pharmacy => "images/special-pharmacy-icon.png",
            OrganizationTypes.Vet => "images/vet-icon-special.png",
            _ => throw new ArgumentOutOfRangeException(nameof(type), type, null)
        };
        
        if(_nearestOrganization[type].Item2 != null)
            _map.MarkersList.Remove(_nearestOrganization[type].Item2);
        _nearestOrganization[type] = (nearest, new Marker(
            new Coordinate(nearest.Location.X, nearest.Location.Y),
            iconImage, 414, 602, 414, 602)
        { Scale = 0.1, Popup = true, Title = nearest.Name });
        _map.MarkersList.Add(_nearestOrganization[type].Item2);
    }
    
    private async Task OnMapClick(Coordinate coordinate)
    {
        if (_selectedPoint != null)
            _map.MarkersList.Remove(_selectedPoint);
        
        _selectedPoint = new Marker(MarkerType.MarkerPin, coordinate, "Выбранная точка");
        _map.MarkersList.Add(_selectedPoint);
    }

    private async Task ResetAsync()
    {
        // Reset nearest Organizations
        foreach (var org in _nearestOrganization)
        {
            _map.MarkersList.Remove(org.Value.Item2);
            _nearestOrganization[org.Key] = (null, null);
        }
        
        // Delete selected marker
        _map.MarkersList.Remove(_selectedPoint);
        _selectedPoint = null;
        _selectedTypes = new List<OrganizationTypes>();
        
        // Remove organization markers
        _showOrganizations
            .Where(kv => kv.Value)
            .Select(kv => kv.Key)
            .ToList()
            .ForEach(async k => await OnShowOrgValueChanged(k));

    }
}