// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(GeoDbContext))]
    [Migration("20231218185307_SeedSchools")]
    partial class SeedSchools
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entities.CityEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Point>("Center")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("center");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("cities", "geo_data");
                });

            modelBuilder.Entity("Database.Entities.SchoolEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AddressComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address_comment");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("city_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("district");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("location");

                    b.Property<string>("MailIndex")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mail_index");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Okrug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("okrug");

                    b.Property<double?>("Rating")
                        .HasColumnType("double precision")
                        .HasColumnName("rating");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("timezone");

                    b.Property<string>("TwoGisUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("two_gis_url");

                    b.Property<string>("WorkingHours")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("working_hours");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("schools", "geo_data");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "Большая Пушкарская, 35",
                            AddressComment = "",
                            CityId = 1L,
                            Country = "Россия",
                            Description = "частная школа",
                            District = "Петроградский район",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (30.308695 59.961798)"),
                            MailIndex = "197101",
                            Name = "Крылья",
                            Okrug = "",
                            Rating = 5.0,
                            Region = "Санкт-Петербург",
                            Timezone = "+03:00",
                            TwoGisUrl = "https://2gis.com/firm/70000001068931674",
                            WorkingHours = "Пн: 08:00-20:00; Вт: 08:00-20:00; Ср: 08:00-20:00; Чт: 08:00-20:00; Пт: 08:00-20:00"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "Средний проспект В.О., 28",
                            AddressComment = "2 этаж",
                            CityId = 1L,
                            Country = "Россия",
                            Description = "частная школа",
                            District = "Василеостровский район",
                            Location = (NetTopologySuite.Geometries.Point)new NetTopologySuite.IO.WKTReader().Read("SRID=0;POINT (30.279865 59.942844)"),
                            MailIndex = "199004",
                            Name = "Ювента",
                            Okrug = "",
                            Rating = 4.0,
                            Region = "Санкт-Петербург",
                            Timezone = "+03:00",
                            TwoGisUrl = "https://2gis.com/firm/5348552838706876",
                            WorkingHours = "Пн: 09:00-18:00; Вт: 09:00-18:00; Ср: 09:00-18:00; Чт: 09:00-18:00; Пт: 09:00-18:00"
                        });
                });

            modelBuilder.Entity("Database.Entities.SchoolEntity", b =>
                {
                    b.HasOne("Database.Entities.CityEntity", "City")
                        .WithMany("Schools")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Database.Entities.CityEntity", b =>
                {
                    b.Navigation("Schools");
                });
#pragma warning restore 612, 618
        }
    }
}
